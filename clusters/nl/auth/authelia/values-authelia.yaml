---
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: acme
  tls: { enabled: true }
  traefikCRD: { enabled: false, disableIngressRoute: true }

pod:
  kind: Deployment # Only need a single deployment/replica for now.
  annotations:
    # Restarts the Deployment if the configmaps/secrets change.
    reloader.stakater.com/auto: "true"
  env:
    - name: "TZ"
      value: "Europe/Amsterdam"

secret:
  additionalSecrets:
    authelia-postgresql-passwords:
      items:
        - key: postgres-password
          path: postgres-password

configMap:
  theme: "dark"

  log:
    level: info
    format: json

  telemetry:
    metrics:
      enabled: true

  default_2fa_method: totp

  authentication_backend:
    refresh_interval: 1m
    ldap:
      enabled: true
      implementation: custom
      address: ldap://lldap.auth.svc.cluster.local:3890
      start_tls: false
      user: uid=admin,ou=people,dc=ar3s3ru,dc=dev
      password: { secret_name: "authelia-secrets" }
      base_dn: dc=ar3s3ru,dc=dev
      additional_users_dn: ou=people
      additional_groups_dn: ou=groups
      users_filter: "(&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))"
      groups_filter: "(&(member=uid={input},ou=people,dc=ar3s3ru,dc=dev)(objectClass=groupOfNames))"
      attributes:
        distinguished_name: "distinguishedName"
        username: "uid"
        mail: "mail"
        member_of: "memberOf"
        group_name: "cn"

  password_policy:
    standard:
      enabled: true
      min_length: 8
      require_uppercase: true
      require_lowercase: true
      require_number: true
      require_special: true

  session:
    cookies:
      - domain: ar3s3ru.dev
        subdomain: auth
    encryption_key: { secret_name: "authelia-secrets" }
    redis:
      enabled: true
      deploy: true
      host: "authelia-redis-headless.auth.svc.cluster.local"
      password: { secret_name: "authelia-secrets" }

  storage:
    encryption_key: { secret_name: "authelia-secrets" }
    postgres:
      enabled: true
      address: tcp://authelia-postgresql.auth.svc.cluster.local:5432
      database: main
      username: postgres
      password:
        secret_name: authelia-postgresql-passwords
        path: postgres-password

  notifier:
    smtp:
      enabled: true
      subject: "{title}"
      address: "submission://smtp.gmail.com:587"
      username: "nl.homelab.ar3s3ru@gmail.com"
      password: { secret_name: "authelia-secrets" }

  identity_validation:
    reset_password:
      jwt_lifespan: "1 day"
      secret: { secret_name: "authelia-secrets" }

  identity_providers:
    oidc:
      enabled: true
      hmac_secret: { secret_name: "authelia-secrets" }
      cors:
        allowed_origins_from_client_redirect_uris: true
        endpoints: [userinfo, authorization, token, revocation, introspection]

      claims_policies:
        # https://www.authelia.com/integration/openid-connect/openid-connect-1.0-claims/#restore-functionality-prior-to-claims-parameter
        default:
          id_token: [email, email_verified, alt_emails, name, preferred_username, groups]
        username_email:
          id_token: [email, email_verified, alt_emails, name, preferred_username]

      jwks:
        - algorithm: RS256
          use: sig
          key:
            path: "/secrets/authelia-secrets/oidc.jwk.RS256.pem"

      clients:
        - client_id: "immich"
          client_name: "Immich"
          client_secret: { path: "/secrets/authelia-oidc-secrets/immich.client_secret.key" }
          public: false
          consent_mode: implicit
          authorization_policy: "one_factor"
          redirect_uris:
            - "https://immich.tail2ff90.ts.net/auth/login"
            - "https://immich.tail2ff90.ts.net/user-settings"
            - "https://photos.ar3s3ru.dev/auth/login"
            - "https://photos.ar3s3ru.dev/user-settings"
            - "https://photos2.ar3s3ru.dev/auth/login"
            - "https://photos2.ar3s3ru.dev/user-settings"
            - "app.immich:///oauth-callback"
          scopes:
            - "openid"
            - "profile"
            - "email"
          userinfo_signed_response_alg: "none"
          token_endpoint_auth_method: "client_secret_post"
        - client_id: "home-assistant"
          client_name: "Home Assistant"
          client_secret: { path: "/secrets/authelia-oidc-secrets/hass.client_secret.key" }
          public: false
          require_pkce: true
          pkce_challenge_method: "S256"
          consent_mode: implicit
          authorization_policy: "two_factor"
          redirect_uris:
            - "https://nl-hass.tail2ff90.ts.net/auth/oidc/callback"
          scopes:
            - "openid"
            - "profile"
            - "groups"
          id_token_signed_response_alg: "RS256"
          token_endpoint_auth_method: "client_secret_post"
        - client_id: "jellyfin"
          client_name: "Jellyfin"
          client_secret: { path: "/secrets/authelia-oidc-secrets/jellyfin.client_secret.key" }
          public: false
          consent_mode: implicit
          authorization_policy: one_factor
          redirect_uris:
            - https://jellyfin.nl.ar3s3ru.dev/sso/OID/redirect/authelia
          scopes:
            - "openid"
            - "email"
            - "profile"
            - "groups"
          token_endpoint_auth_method: client_secret_post
        - client_id: "jellyseerr"
          client_name: "Jellyseerr"
          client_secret: { path: "/secrets/authelia-oidc-secrets/jellyseerr.client_secret.key" }
          public: false
          consent_mode: implicit
          authorization_policy: one_factor
          redirect_uris:
            - https://jellyseerr.ar3s3ru.dev/login/oidc/callback/authelia
          scopes:
            - "openid"
            - "email"
            - "profile"
            - "groups"
          token_endpoint_auth_method: client_secret_post
        - client_id: "vaultwarden"
          client_name: "Vaultwarden"
          client_secret: { path: "/secrets/authelia-oidc-secrets/vaultwarden.client_secret.key" }
          public: false
          require_pkce: true
          pkce_challenge_method: "S256"
          consent_mode: implicit
          authorization_policy: two_factor
          redirect_uris:
            - https://nl-pwd.tail2ff90.ts.net/identity/connect/oidc-signin
            - https://vault.ar3s3ru.dev/identity/connect/oidc-signin
          scopes:
            - "openid"
            - "offline_access"
            - "profile"
            - "email"
          response_types:
            - "code"
          grant_types:
            - "authorization_code"
            - "refresh_token"
          access_token_signed_response_alg: "none"
          userinfo_signed_response_alg: "none"
          token_endpoint_auth_method: "client_secret_basic"
        - client_id: grafana
          client_name: Grafana
          client_secret: { path: "/secrets/authelia-oidc-secrets/grafana.client_secret.key" }
          public: false
          authorization_policy: two_factor
          require_pkce: true
          pkce_challenge_method: S256
          redirect_uris:
            - https://nl-grafana.tail2ff90.ts.net/login/generic_oauth
          scopes:
            - openid
            - profile
            - groups
            - email
          response_types:
            - code
          grant_types:
            - authorization_code
          access_token_signed_response_alg: none
          userinfo_signed_response_alg: none
          token_endpoint_auth_method: client_secret_basic
